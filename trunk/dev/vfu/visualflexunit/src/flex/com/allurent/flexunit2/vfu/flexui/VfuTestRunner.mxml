<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) 2007 Allurent, Inc.
    http://code.google.com/p/visualflexunit/

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->

<mx:VBox
        xmlns:mx="http://www.adobe.com/2006/mxml"
        xmlns:vfuui="com.allurent.flexunit2.vfu.flexui.*"
        xmlns="*"
        implements="flexunit.flexui.IFlexWriter">

    <mx:Script>
        <![CDATA[

            /*
             * General Notes:
             *
             *   This VfuTestRunner class, and Visual FlexUnit in general, have been written
             *   as an adjunct to FlexUnit and our approach has been to tack our code onto
             *   FlexUnit's structure.
             *
             *   This class replaces FlexUnit's TestRunner class. The code here
             *   does a good deal more, but we've retained TestRunner's personality in
             *   a couple of key ways.
             *
             *   First of all, as an IFlexWriter, we implement all the required IFlexWriter
             *   methods. As its name suggests, an IFlexWriter is essentially an output
             *   device for FlexUnit results. A reference to an IFlexWriter is passed into
             *   FlexUnit at startup, and FlexUnit reports results out as tests are run.
             *
             *   Second, we retain FlexUnit's approach by storing error data in the List
             *   components that display Failures and All Tests on the left side of the screen.
             *   In my opinion we're starting to approach the point where some refactoring
             *   is needed. Things work fine now, the code isn't too hard to understand (yet),
             *   but if we/when continue to add functionality, it will soon be time to do some
             *   refactoring. For one thing, VFU errors carry a lot more data than FlexUnit's do.
             *
             *   Also note that we aren't just using list items to store our errors -
             *   BlessableErrors also reference their list items so that we can remove those
             *   items from their lists if/when they are blessed. (See addFailureToList(),
             *   addTestToList(), and onBlessActualBitmap() if you'd like to see the details.)
             *
             *   If Visual FlexUnit continues to evolve I would suggest that we implement
             *   a simple MVC architecture, bind the lists to the model, etc., and get rid
             *   of this clunkiness.
             *
             *                                       - Douglas
             */

            import mx.collections.ArrayCollection;
            import mx.collections.ListCollectionView;
            import mx.controls.List;
            import mx.core.Application;
            import mx.core.IFlexDisplayObject;
            import mx.graphics.codec.PNGEncoder;
            import mx.managers.PopUpManager;

            import flexunit.framework.TestCase;
            import flexunit.framework.Test;
            import flexunit.framework.AssertionFailedError;
            import flexunit.flexui.TestRunner;
            import flexunit.flexui.IFlexWriter;

            import com.allurent.flexunit2.vfu.errors.BitmapNotMatchBaselineError;
            import com.allurent.flexunit2.vfu.errors.MissingBaselineError;
            import com.allurent.flexunit2.vfu.errors.BlessableError;
            import com.allurent.flexunit2.vfu.flexui.DiffViewer;
            import com.allurent.flexunit2.vfu.utils.ObjectUtil;
            import com.allurent.flexunit2.vfu.utils.bitmap.BitmapUtil;
            import com.allurent.flexunit2.vfu.utils.io.IFileWriter;

            private var _currSelectedBlessableError:BlessableError;
            private var _diffViewer:DiffViewer;
            private var _minImageSize:int = 100;
            private var _numTestsRun:uint = 0;
            private var _totalTests:uint = 0;
            private var _totalErrors:uint = 0;
            private var _totalFailures:uint = 0;

            public var test:Test;
            public var fileWriter:IFileWriter;

            public function startTest() : void
            {
                if( test != null )
                {
                    _totalTests = test.countTestCases();

                    progressBar.minimum = 0;
                    failuresList.dataProvider = new Array();
                    allTestsList.dataProvider = new Array();

                    updateLabels();

                    flexunit.flexui.TestRunner.run( test, this );
                }
            }

            private function addFailureToList( test:Test, error:Error ):void
            {
                var t:TestCase = test as TestCase;
                if( t != null )
                {
                    var itemForList:Object = {label:t.methodName+" - "+t.className, error:error};
                    if (error is BlessableError)
                    {
                        var blessableError:BlessableError = BlessableError(error);
                        blessableError.itemForFailureList = itemForList;
                    }
                    ListCollectionView(failuresList.dataProvider).addItem( itemForList );
                    failuresList.selectedIndex = failuresList.dataProvider.length;
                    failuresList.verticalScrollPosition = failuresList.maxVerticalScrollPosition;
                    onTestSelected();
                }
            }

            private function addTestToList( success:Boolean, test:Test, error:Error = null ) : void
            {
                var t:TestCase = test as TestCase;
                if( t != null )
                {
                    var label:String = ( success ) ? "[PASS] " : "[FAIL] ";
                    var itemForList:Object = {label:label+t.methodName+" - "+t.className, error:error};
                    if (error is BlessableError)
                    {
                        BlessableError(error).itemForAllTestsList = itemForList;
                    }
                    ListCollectionView(allTestsList.dataProvider).addItem( itemForList );
                    allTestsList.selectedIndex = allTestsList.dataProvider.length;
                    allTestsList.verticalScrollPosition = allTestsList.maxVerticalScrollPosition;
                    onTestSelected();
                }
            }

            private function convertTestIDToPNGWritePath( testID:String ):String
            {
                var filePath:String = "file:/" + Application.application.baselineFolderPath + "/" + testID + ".png";
                return filePath;
            }

            private function onBlessActualBitmap():void
            {
                var pngEnc:PNGEncoder = new PNGEncoder();
                var data:ByteArray = pngEnc.encode(_currSelectedBlessableError.actualBMD);
                var url:String = convertTestIDToPNGWritePath(_currSelectedBlessableError.testID);
                fileWriter.write(url, data);
                removeItemFromList(_currSelectedBlessableError.itemForAllTestsList, allTestsList);
                removeItemFromList(_currSelectedBlessableError.itemForFailureList, failuresList);
                detailViews.selectedChild = emptyDetailView;
            }

            private function onBlessAndCloseDiffViewer(e:Event):void
            {
                onCloseDiffViewer(e);
                onBlessActualBitmap();
            }

            private function onCloseDiffViewer(e:Event):void
            {
                PopUpManager.removePopUp(_diffViewer);
                _diffViewer = null;
            }

            private function onTestSelected():void
            {
                var list:List;
                switch ( listTabs.selectedChild )
                {
                    case allTestsListTab:
                        list = allTestsList;
                        break;
                    case failuresListTab:
                        list = failuresList;
                        break;
                    default:
                        throw new Error("listTabs.selectedChild's value not covered by switch case");
                }

                if( list.selectedItem == null )
                {
                    detailViews.selectedChild = emptyDetailView;
                    _currSelectedBlessableError = null;
                }
                else
                {
                    if( list.selectedItem.error == null )
                    {
                        detailViews.selectedChild = emptyDetailView;
                    }
                    else
                    {
                        if ( list.selectedItem.error is BlessableError )
                        {
                            _currSelectedBlessableError = BlessableError( list.selectedItem.error );
                            switch ( ObjectUtil.getInstanceType(_currSelectedBlessableError) )
                            {
                                case "BitmapNotMatchBaselineError":
                                    bitmapsNotMatchDetailView.error = BitmapNotMatchBaselineError(_currSelectedBlessableError);
                                    bitmapsNotMatchDetailView.init();
                                    detailViews.selectedChild = bitmapsNotMatchDetailView;
                                    break;
                                case "MissingBaselineError":
                                    missingBaselineDetailView.error = MissingBaselineError(_currSelectedBlessableError);
                                    missingBaselineDetailView.init();
                                    detailViews.selectedChild = missingBaselineDetailView;
                                    break;
                                default:
                                    throw new Error("ObjectUtil.getInstanceType(_currSelectedBlessableError)'s value not covered by switch case");
                            }
                        }
                        else
                        {
                            stackTraceDetailView.stackTraceText = list.selectedItem.error.getStackTrace();
                            detailViews.selectedChild = stackTraceDetailView;
                        }
                    }
                }
            }

            private function onViewDiff():void
            {
                _diffViewer = DiffViewer( PopUpManager.createPopUp(this, DiffViewer, true));
                _diffViewer.width      = Math.floor(Application.application.width  * .9);
                _diffViewer.height     = Math.floor(Application.application.height * .9);
                _diffViewer.x          = Math.floor(Application.application.width  * .05);
                _diffViewer.y          = Math.floor(Application.application.height * .05);
                _diffViewer.error      = BitmapNotMatchBaselineError(_currSelectedBlessableError);
                _diffViewer.addEventListener(DiffViewer.BLESS_AND_CLOSE_DIFF_VIEWER, onBlessAndCloseDiffViewer);
                _diffViewer.addEventListener(DiffViewer.CLOSE_DIFF_VIEWER, onCloseDiffViewer);
                _diffViewer.init();
            }

            private function removeItemFromList(item:Object, list:List):void
            {
                var dp:ArrayCollection = ArrayCollection( list.dataProvider );
                var index:int = dp.getItemIndex(item);
                var result:Object = dp.removeItemAt(index);
                if (result != item)
                {
                    throw new Error("removeItemFromList() didn't remove correct item");
                }
            }

            private function updateLabels():void
            {
                runLabel.htmlText = "<b>Run:</b> "+_numTestsRun.toString()+"/"+_totalTests.toString();
                errorsLabel.htmlText = "<b>Errors:</b> "+_totalErrors.toString();
                failuresLabel.htmlText = "<b>Failures:</b> "+_totalFailures.toString();
            }

            private function updateProgress():void
            {
                progressBar.setProgress( _numTestsRun, _totalTests );

                if( _totalErrors > 0 || _totalFailures > 0 )
                    progressBar.setStyle("barColor",0xFF0000);
            }

            /* ***************************************************************
             *
             *     IFlexWriter Methods - Required by FlexUnit
             *
             ****************************************************************/


            public function onTestStart( test:Test ) : void
            {
            }

            public function onTestEnd( test:Test ) : void
            {
                _numTestsRun++;

                updateLabels();
                updateProgress();
            }

            public function onAllTestsEnd() : void
            {
                progressBar.setProgress(100,100);
                progressBar.label = "Finished";
                if( _totalErrors == 0 && _totalFailures == 0 )
                progressBar.setStyle("barColor",0x00FF00);
            }

            public function onSuccess( test:Test ) : void
            {
                addTestToList( true, test );
            }

                public function onError( test:Test, error:Error ) : void
                {
                    _totalErrors++;
                    addFailureToList( test, error );
                    addTestToList( false, test, error );
                }

            public function onFailure( test:Test, error:AssertionFailedError ) : void
            {
                _totalFailures++;
                addFailureToList( test, error );
                addTestToList( false, test, error );
            }
        ]]>
    </mx:Script>

    <mx:Canvas width="100%" height="100%">
        <mx:Panel backgroundAlpha="0.4" title="Test Runner" paddingBottom="10" width="100%" height="100%">

            <!-- Info At Top -->

            <mx:HBox width="100%">
                <mx:HBox width="50%" height="20" horizontalAlign="left" paddingLeft="0" paddingRight="10">
                    <mx:ProgressBar
                            id="progressBar"
                            width="100%"
                            trackHeight="12"
                            labelPlacement="left"
                            label="Running..."
                            mode="manual" />
                </mx:HBox>
                <mx:HBox width="50%" height="20" horizontalAlign="left">
                    <mx:Label id="runLabel" paddingRight="10" />
                    <mx:Label id="errorsLabel" text="Errors: 0" paddingRight="10" />
                    <mx:Label id="failuresLabel" text="Failures: 0" />
                </mx:HBox>
            </mx:HBox>

            <!-- Main Display Body -->

            <mx:HDividedBox id="dividedBox" width="100%" height="100%">

                <!-- Test Lists -->

                <mx:TabNavigator id="listTabs" change="onTestSelected()" width="30%" height="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" creationPolicy="all" >
                    <mx:Canvas id="failuresListTab" label="Failures" width="100%" height="100%">
                        <mx:List id="failuresList" width="100%" height="100%" borderStyle="none"
                                 change="onTestSelected()" />
                    </mx:Canvas>
                    <mx:Canvas id="allTestsListTab" label="All Tests" width="100%" height="100%">
                        <mx:List id="allTestsList" width="100%" height="100%" borderStyle="none"
                                 change="onTestSelected()" />
                    </mx:Canvas>
                </mx:TabNavigator>

                <!-- Test Results - a ViewStack, so only one view is displayed, depending on result type -->

                <mx:ViewStack
                        id="detailViews"
                        width="50%"
                        height="100%"
                        creationPolicy="all">
                    <vfuui:BitmapsNotMatchDetailView
                            id="bitmapsNotMatchDetailView"
                            blessActualBitmap="onBlessActualBitmap()"
                            viewDiff="onViewDiff()"/>
                    <mx:Panel
                            id="emptyDetailView" />
                    <vfuui:MissingBaselineDetailView
                            id="missingBaselineDetailView"
                            blessActualBitmap="onBlessActualBitmap()"/>
                    <vfuui:StackTraceDetailView
                            id="stackTraceDetailView" />
                </mx:ViewStack>
            </mx:HDividedBox>
        </mx:Panel>
    </mx:Canvas>
</mx:VBox>

