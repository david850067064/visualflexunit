<!--
    Copyright (c) 2007 Allurent, Inc.
    http://code.google.com/p/visualflexunit/
    
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    
    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->

<project name="tools.targets">
    <!--
        The following targets are common targets that every project should
        support and the interdependencies between such targets. If another
        project overrides this method it can reference it by calling
        tools.target.
    -->

    <!--
        ++ =======================================================================
        ++ Target: init
        ++ 
        ++ Create all directories and other resources required by miscellaneous targets.
        ++ =======================================================================
    -->
    <target name="init" description="Set up the project">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${build.generated.dir}" />
        <mkdir dir="${build.javac.dir}" />
        <mkdir dir="${build.compc.dir}" />
        <mkdir dir="${build.mxmlc.dir}" />
        <mkdir dir="${build.as3doc.dir}" />
        <mkdir dir="${build.stage.dir}" />
        <mkdir dir="${build.dist.dir}" />
    </target>

    <!--
        ++ =======================================================================
        ++ Target: build
        ++ 
        ++ Build everything
        ++ =======================================================================
    -->
    <target name="build" depends="init" description="Build the project" />

    <!--
        ++ =======================================================================
        ++ Target: test
        ++ 
        ++ Test everything
        ++ =======================================================================
    -->
    <target name="test" depends="build" description="Test the project" />

    <!--
        ++ =======================================================================
        ++ Target: stage
        ++ 
        ++ Stage the project for creating a distribution
        ++ =======================================================================
    -->
    <target name="stage" depends="build" description="Stage the project" />

    <!--
        ++ =======================================================================
        ++ Target: dist
        ++ 
        ++ Create a distribution version of the project
        ++ =======================================================================
    -->
    <target name="dist" depends="stage" description="Create a distribution" />

    <!--
        ++ =======================================================================
        ++ Target: deploy
        ++ 
        ++ Deploy the project
        ++ =======================================================================
    -->
    <target name="deploy" depends="dist" description="Deploy the project" />

    <!--
        ++ =======================================================================
        ++ Target: clean
        ++ 
        ++ Remove all build assets from a project directory.
        ++ =======================================================================
    -->
    <target name="clean" description="Clean the project">
        <!--
            Manually delete each one in case one of them
            was moved to a directory not under build.dir
        -->
        <delete dir="${build.dist.dir}" quiet="true" />
        <delete dir="${build.stage.dir}" quiet="true" />
        <delete dir="${build.as3doc.dir}" quiet="true" />
        <delete dir="${build.mxmlc.dir}" quiet="true" />
        <delete dir="${build.compc.dir}" quiet="true" />
        <delete dir="${build.javac.dir}" quiet="true" />
        <delete dir="${build.generated.dir}" quiet="true" />
        <delete dir="${build.dir}" quiet="true" />
    </target>

    <!--
        ++ =======================================================================
        ++ Target: undeploy
        ++ 
        ++ Undeploy the project
        ++ =======================================================================
    -->
    <target name="undeploy" description="Undeploy the project" />

    <!--
        The following targets are utility targets that define standard targets a
        project might need to run into order to complete these steps. Based on the
        properties set via build-common-properties.xml these targets define a reasonable
        default behavior.
    -->

    <!--
        ++ =======================================================================
        ++ Target: flex-application
        ++ 
        ++ Build a Flex application, including the copying of non-compiled
        ++ resources.
        ++ =======================================================================
    -->
    <target name="flex-application" depends="init,flex-application-check,flex-application-copy"
        unless="${project.swf}.compiled" description="Compile the application">
        <mxmlc src="${src.flex.dir}/${project.flex.application}"
            dest="${build.mxmlc.dir}/${project.swf}" />
    </target>

    <!--
        ++ =======================================================================
        ++ Target: flex-application-copy
        ++ 
        ++ Copies all files not part of the compile step to the destination
        ++ directory
        ++ Separate target to copy non-source files to allow easy customization
        ++ =======================================================================
    -->
    <target name="flex-application-copy">
        <echo message="${src.flex.dir}" />
        <echo message="${build.mxmlc.dir}" />
        <copy todir="${build.mxmlc.dir}" includeEmptyDirs="false">
            <fileset dir="${src.flex.dir}">
                <exclude name="**/*.as" />
                <exclude name="**/*.mxml" />
                <!--  Next 2 lines for Visual FlexUnit   -->
                <exclude name="**/skinning/**" />
                <exclude name="**/baseline/**" />
            </fileset>
        </copy>
        <!--  Next copy is for Visual FlexUnit  -->
        <copy todir="${build.generated.dir}/skinning" includeEmptyDirs="false" failonerror="false">
            <fileset dir="${src.flex.dir}/skinning" />
        </copy>
    </target>

    <!-- up to date check for flex-application -->
    <target name="flex-application-check">
        <!--
            This somewhat convoluted procedure calculates a comma-delimited
            list of SWCs relative to the root directory, which can be used
            below as a matching "pattern" for an <uptodate> fileset.
        -->
        <pathconvert property="flex.lib.files" refid="flex.lib.path" pathsep=",">
            <globmapper from="${uptodate.dir}/*" to="*" handledirsep="true" />
        </pathconvert>

        <!-- Default the SWC list to a pattern that matches nothing if none were speced -->
        <condition property="mxmlc.lib.files" value="${flex.lib.files}" else="__no_match__">
            <not>
                <equals arg1="" arg2="${flex.lib.files}" trim="true" />
            </not>
        </condition>

        <uptodate property="${project.swf}.compiled"
            targetfile="${build.mxmlc.dir}/${project.swf}">
            <srcfiles dir="${src.flex.dir}" includes="**/*" />
            <srcfiles dir="${build.generated.dir}" includes="**/*" />
            <srcfiles dir="${uptodate.dir}" includes="${mxmlc.lib.files}" />
        </uptodate>
    </target>

    <!--
        ++ =======================================================================
        ++ Target: flex-library
        ++ 
        ++ Build a Flex SWC.
        ++ =======================================================================
    -->
    <target name="flex-library" depends="init,flex-library-check" unless="${project.swc}.compiled"
        description="compile flex code into a SWC">
        <compc src.dir="${src.flex.dir}" dest="${build.compc.dir}/${project.swc}" />
    </target>

    <!-- up to date check for flex-library -->
    <target name="flex-library-check">
        <!-- avoid error if no generated files exist -->
        <pathconvert property="flex.lib.files" refid="flex.lib.path" pathsep=",">
            <globmapper from="${uptodate.dir}/*" to="*" handledirsep="true" />
        </pathconvert>

        <condition property="compc.lib.files" value="${flex.lib.files}" else="__no_match__">
            <not>
                <equals arg1="" arg2="${flex.lib.files}" trim="true" />
            </not>
        </condition>

        <uptodate property="${project.swc}.compiled"
            targetfile="${build.compc.dir}/${project.swc}">
            <srcfiles dir="${src.flex.dir}" includes="**/*" />
            <srcfiles dir="${uptodate.dir}" includes="${compc.lib.files}" />
        </uptodate>
    </target>

    <!--
        ++ =======================================================================
        ++ Target: doc
        ++ Create AS3Doc files for the project
        ++ =======================================================================
    -->
    <target name="as3doc" depends="init,as3doc-check" unless="as3doc.uptodate"
        description="create AS3 docs">
        <as3doc src.dir="${src.flex.dir}" as.path="${src.flex.dir}"
            dest.dir="${build.as3doc.dir}" />
    </target>

    <!-- up to date check for as3doc -->
    <target name="as3doc-check">
        <uptodate property="as3doc.uptodate" targetfile="${build.as3doc.dir}/index.html">
            <srcfiles dir="${src.flex.dir}" includes="**/*" />
        </uptodate>
    </target>

    <!--
        ++ =======================================================================
        ++ Target: flex-test-application
        ++ 
        ++ Build a Flex test application, including the copying of non-compiled
        ++ resources.
        ++ =======================================================================
    -->
    <target name="flex-test-application"
        depends="init,create-test-suite,flex-application-check,flex-application-copy"
        unless="${project.swf}.compiled" description="Compile the application">
        <mxmlc src="${build.generated.dir}/${project.flex.application}"
            dest="${build.mxmlc.dir}/${project.swf}"
            options="-verbose-stacktraces=true ${flex.mxmlc.options}" />
    </target>

    <!--
        ++ =======================================================================
        ++ Target: create-test-suite
        ++ Generate arc-flexunit2 compatible AllTests AS class from flexunit tests
        ++ =======================================================================
    -->
    <target name="create-test-suite" depends="init,create-test-suite-check"
        unless="create-test-suite.uptodate">
        <echo message="Updating ${build.generated.dir}/${arc-flexunit2.class}.as" />
        <java classname="com.allurent.flexunit2.framework.AllTestsFileGenerator" fork="true"
            failonerror="true" logError="true"
            output="${build.generated.dir}/${arc-flexunit2.class}.as">
            <classpath>
                <pathelement location="${arc-flexunit2.jar}" />
            </classpath>
            <arg value="${src.flex.dir}" />
            <arg value="${arc-flexunit2.filters}" />
        </java>

        <!-- 
            Our default behavior is to copy arc-flexunit.mxml but this can be overridden 
            by setting flexunit2.runtests.mxml in a project's build files 
        -->
        <property name="flexunit2.runtests.mxml" value="${arc-flexunit2.mxml}" />

        <copy file="${flexunit2.runtests.mxml}"
            tofile="${build.generated.dir}/${project.flex.application}">
            <filterset>
                <filter token="arc-flexunit2.alltests.suite"
                    value="${arc-flexunit2.alltests.suite}" />
                <filter token="arc-flexunit2.reportserver.host"
                    value="${arc-flexunit2.reportserver.host}" />
                <filter token="arc-flexunit2.reportserver.port"
                    value="${arc-flexunit2.reportserver.port}" />
            </filterset>
        </copy>
    </target>

    <target name="create-test-suite-check">
        <uptodate property="create-test-suite.uptodate"
            targetfile="${build.generated.dir}/${arc-flexunit2.class}.as">
            <srcfiles dir="${src.flex.dir}" />
            <srcfiles file="${arc-flexunit2.filters}" />
        </uptodate>
    </target>

    <!--
        ++ =======================================================================
        ++ Target: test-flexunit2
        ++ 
        ++ Run Flexunit2 tests
        ++ =======================================================================
    -->
    <target name="test-flexunit2" depends="init">
        <!--
        	In order to use the Standalone player from the command line on a Mac
            it needs to be launched using the open command. These next three checks
            setup the needed branching to make it work.
        -->
        <condition property="test.flexunit2.exec" value="${mac.open}"
            else="${flex.standalone.player}">
            <os family="mac" />
        </condition>
        <condition property="test.flexunit2.opt1" value="-a" else="">
            <os family="mac" />
        </condition>
        <condition property="test.flexunit2.opt2" value="${flex.standalone.player}" else="">
            <os family="mac" />
        </condition>
        <parallel>
            <!-- Start the ReportServer and listen for results from the standalone player.    -->
            <java classname="com.allurent.flexunit2.framework.UnitTestReportServer"
                outputproperty="server.output" fork="true" resultproperty="reportserver.return.code"
                timeout="${arc-flexunit2.timeout}">
                <classpath>
                    <pathelement location="${arc-flexunit2.jar}" />
                </classpath>

                <arg value="${arc-flexunit2.reportserver.port}" />
            </java>

            <!-- Start the standalone player with the swf.  Tests execute when the standalone player loads the swf. -->
            <sequential>
                <!-- Need to wait a couple of seconds to avoid a race condition in Ant -->
                <sleep seconds="2" />
                <exec executable="${test.flexunit2.exec}" dir="${basedir}/${build.mxmlc.dir}"
                    failonerror="false" resultproperty="flashplayer.return.code"
                    timeout="${arc-flexunit2.timeout}" vmlauncher="true">
                    <arg value="${test.flexunit2.opt1}" />
                    <arg value="${test.flexunit2.opt2}" />
                    <arg value="${project.swf}" />
                    <env key="DISPLAY" value="${environment.display}" />
                </exec>
            </sequential>
        </parallel>

        <echo message="${server.output}" />

        <condition property="flexunit2.failed">
            <not>
                <and>
                    <equals arg1="0" arg2="${reportserver.return.code}" />
                    <equals arg1="0" arg2="${flashplayer.return.code}" />
                </and>
            </not>
        </condition>
        <antcall target="test-flexunit2-failure" />
    </target>

    <!--
        ++ =======================================================================
        ++ Target: test-flexunit2-failure
        ++ 
        ++ Target to handle a failed flexunit test run
        ++ It is common to override this and do additional actions if a test fails
        ++ such as create a failure file, send email, etc.
        ++ =======================================================================
    -->
    <target name="test-flexunit2-failure" if="flexunit2.failed">
    
    	<!--
    		You have various options regarding what your build process will
    		do when a test fails. In this implementation we're simply echoing
    		out a very noticeable message to the command prompt. 
    		
    		Another option: include a line like this to stop the build process:
            <fail message="Test suite failed" />
            
            More sophisticated build systems may use Ant functionality to send an
            email, etc.
    	-->
    	
    	<echo message="######################################################" />
    	<echo message="#" />
    	<echo message="#" />
    	<echo message="#" />
    	<echo message="#           Test(s) Failed" />
    	<echo message="#" />
    	<echo message="#" />
    	<echo message="#" />
    	<echo message="######################################################" />

    </target>

    <!--
        ++ =======================================================================
        ++ Target: build-visualflexunit
        ++ 
        ++ Builds the SWF-based (non-AIR) GUI (not automated) test runner
        ++ app for a project that contains visual tests.
        ++ =======================================================================
    -->
    <target name="build-visualflexunit">
        <antcall target="flex-application">
            <param name="src.flex.dir"                   value="src"/>
            <param name="project.swf"                    value="${visualflexunit.swfgui.app.name}.swf"/>
            <param name="project.flex.application"       value="${visualflexunit.swfgui.app.name}.mxml"/>
        </antcall>        
    </target>

    <!--
        ++ =======================================================================
        ++ Target: test-visualflexunit
        ++ 
        ++ Runs the SWF-based (non-AIR) GUI (not automated) test runner
        ++ app for a project that contains visual tests.
        ++ =======================================================================
    -->
    <target name="test-visualflexunit">
    
        <!--
        <property name="reportserver.pass.indicator.file"   value="${build.dir}/.arc-flexunit2.pass" />
    
	    <delete file="${reportserver.pass.indicator.file}"     quiet="${quiet}" />
        <delete file="${arc-flexunit2.failure.indicator.file}" quiet="${quiet}" />
		-->
		
        <parallel>
        
            <!-- Start the ReportServer and listen for results from the standalone player.    -->
            
            <!--
            <java classname="com.allurent.flexunit2.framework.UnitTestReportServer"
                  classpathref="arc-flexunit2.class.path"
                  outputproperty="server.output"
                  fork="true"
                  resultproperty="reportserver.return.code"
                  timeout="${arc-flexunit2.timeout}">
                <arg value="-port" />
                <arg value="${arc-flexunit2.reportserver.port}" />
                <arg value="-file" />
                <arg value="${reportserver.pass.indicator.file}" />
            </java>
			-->
			
            <!-- Start the standalone player with the swf.  Tests execute when the standalone player loads the swf. -->
            <sequential>
                <sleep seconds="3"/>
                <exec executable="${flex.standalone.player}"
                      dir="${basedir}/${build.dir}"
                      failonerror="false"
                      resultproperty="flashplayer.return.code"
                      timeout="${arc-flexunit2.timeout}"
                      vmlauncher="true">
                    <arg value="${visualflexunit.swfgui.app.name}.swf" />
                    <env key="DISPLAY" value="${environment.display}" />
                </exec>
            </sequential>
        </parallel>
    </target>

    <!--
        ++ =======================================================================
        ++ Target: java-classes
        ++ 
        ++ Compile java files
        ++ =======================================================================
    -->
    <target name="java-classes" depends="init,java-classes-copy"
        description="Compile java classes">
        <java-compile debug="${javac.debug}" />
    </target>

    <!--
        ++ =======================================================================
        ++ Target: java-classes-copy
        ++ 
        ++ Copies all files not part of the compile step to the destination
        ++ directory
        ++ =======================================================================
    -->
    <target name="java-classes-copy">
        <copy todir="${build.javac.dir}">
            <fileset dir="${src.java.dir}" includes="**/*" excludes="**/*.java" />
        </copy>
    </target>
</project>
