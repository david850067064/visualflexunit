#summary Main documentation page for Visual FlexUnit

=  Visual !FlexUnit (VFU) =

===  Note: (2007.11.02) This is a rough draft of Visual !FlexUnit's documentation. Visual !FlexUnit has not yet been released to the public. We hope to do so soon. ===

Contributors:
 * Douglas !McCarroll
 * Joe Berkovitz
 * Marty Frenzel
 * Tim Walling

==  Introduction ==

Visual !FlexUnit is an [http://www.allurent.com Allurent] open source project. Its goal is to establish a framework for the testing of components' visual appearance by enhancing [http://labs.adobe.com/wiki/index.php/ActionScript_3:resources:apis:libraries#FlexUnit FlexUnit] with additional features to support "visual assertions". In a nutshell, a visual assertion asserts that a component's appearance is identical to a stored baseline image file.

For the present VFU should be considered an experiment in progress. While it's now reaching the point where it's a practical and useful tool, it's also a bit like a toddler who is just taking baby steps. Simply stated, we don't have enough experience working with it to know where tweaks will be required. So, if your visual tests fail when you think they should be passing, this may simply be an indication that VFU needs to be tweaked. Please be in touch if you think that this may be the case.

If any of the explanations or instructions on this page are less than clear we'd be grateful for your feedback.

==  Overview ==

Visual !FlexUnit allows you to write "visual tests" for your Adobe Flex projects.

In these tests you can:
 * Instantiate and initialize UI components
 * Place them in a series of test states by means of:
  * property settings
  * style settings
  * simulated mouse and keyboard events
 * Write "visual assertions" that compare the components' appearance with saved baseline bitmaps

Tests succeed if components and baselines are close enough to identical to be visually indistinguishable.

Tests can be run either in GUI mode or through Ant.

===  GUI Mode ===

The GUI version of VFU can run as AIR app, in a browser, or in Flash Player.

GUI mode will report errors, just like !FlexUnit. It also allows you to:
 * Use a visual diff viewer to see how test result images differ from baseline images
 * View statistics on how many pixels differ, by how much, etc.
 * In AIR mode, you can bless the current test image, i.e. the appearance of the component that your test case has just created, and thereby create a new baseline. Cases where you would want to do this include:
  * The unit test is new and you need to create its original baseline image
  * Your test has failed, but you decide that the new test result image is acceptable and can become the new baseline

===  Ant Mode ===

 * Simply reports whether tests pass or fail.
 * Can run tests in either Firefox or Flash Player.
 * The build process could be modified to send notification emails, etc.

===  Why Is This Useful? ===

====  Regression Testing ====

By adding visual tests to your build process you can be assured that any changes to your codebase, or to the Flex/Flash framework, that effect the appearance of your components will be noticed immediately.

====  Testing For Cross-Platform Rendering Differences ====

While Adobe has done a great job of making Flash & Flex a write-once / deploy-anywhere platform, there may be differences in how images render:
 * Between the Flash Player, browser plugins, and the AIR runtime
 * Between Windows, Mac, and Linux
 * And, of course, between the many combinations of these variables

To date our limited testing has only detected a) differences that aren't visually noticeable, and b) differences in very unusual cases that you would never use in the real world. Still, it doesn't hurt to check. By running regression tests on multiple platforms you can be assured that any unseemly differences in component rendering will be brought to your attention quickly.

== How To Use Visual !FlexUnit ==

=== Section Overview ===

The following subsections give directions on how to use Visual !FlexUnit.

*Step 1: Bootstrapping a Visual Test Project:* In this section we show you how to use an included Ant script to create an empty project framework for your visual test project.

*Step 2: Writing Visual Tests:* Writing test classes and methods for VFU.

*Step 3: Running Your Tests with the VFU AIR GUI:* How to run your visual tests in VFU's AIR GUI. This may be all you need to know. We think that VFU may be useful to many users who just use the AIR GUI to run tests, and skip the remaining steps.

*Step 4: Connecting to VFU's Build Process:* How to wire your newly created test project into the Ant build process that we've included with your download. This can be considered a continuation of Step 1 - the second half of bootstrapping a test project. We've placed it in Step 4 because some users won't want to go this far.

*Step 5: Using the Build Process:* Fifth, we explain how to use the build process to:
 * Run your tests in automated mode in the Flash Player
 * Run your tests in automated mode in !FireFox
 
*Step 6: Using VFU's SWF-Based GUI:* See details below on why, if you've gotten this far, you might want to do this.
=== ===
=== ===
===  Folder Layout ===

The downloadable visualflexunit.zip file unzips into this folder hierarchy:
{{{
  visualflexunit
    dev
      arc-flexunit2             - build process code
      flexunit                  - FlexUnit source code
      tools                     - build process code
      vfu
        vfuexample              - project containing example components
        vfuexampleTest          - example visual test project
        visualflexunit          - Visual FlexUnit source code
        visualflexunitTest      - unit tests for Visual FlexUnit code
 }}}
 
These instructions assume that you'll be using a folder structure similar to that demonstrated by `/vfu/` and its subfolders, i.e. that you'll have an uber project folder (`/vfu/` in this case) which contains your 'tested project' and 'test project' folders.
 
For example, if your uber project is named 'foo' and your tested project is name 'bar' you'd have:
{{{
   visualflexunit
     dev
       arc-flexunit2
       flexunit     
       foo
         bar
         barTest
       tools        
       vfu
         vfuexample 
         vfuexampleTest
         visualflexunit
         visualflexunitTest
  }}}
  
=== Conventions ===
  
 * Throughout these instructions we use these conventions:
  * *`[uber_project]`* - The name of your uber project, e.g. `foo` in the example above
  * *`[tested_project]`* - The name of a project that you've created containing visual content, which you'd like to test, e.g. `bar` in the example above
  * *`[tested_project]Test`* - The name of the test project which will contain tests for `[tested_project]`, e.g. `barTest` in the example above
 * All `[uber_project]` and `[tested_project]` names must be unique within your build process

=== Example Projects ===

We've included two example projects in `/dev/vfu/`. `vfuexampleTest` is a VFU enabled test project that tests visual components in `vfuexample`. It contains all the functionality described in Step 1 for bootstrapped projects, plus:
  * Fully implemented VFU test code. You can refer to this when implementing Step 2.
  * Fully implemented Ant code that wires the test project into the build process. You'll want to refer to this when implementing Step 4.

===  Step 1: Bootstrapping a Visual Test Project ===

The Visual !FlexUnit download includes Ant scripts that will allow you to bootstrap a test project for `[tested_project]`. Bootstrapping includes:
 * Creation of a folder hierarchy for your project.
 * Creation of !FlexBuilder project files, so that the project can be imported into Eclipse.
 * Creation of framework code files including GUI App files, a CSS file, Ant files, etc.

==== Bootstrap How-To ====

Assumptions:

We make the following assumptions. If these are correct you should be able to bootstrap projects by following the directions below. (If you have sufficient Flex and Ant knowledge you can work around these, e.g. compiling your AIR GUI test app from the command line, but we don't cover such scenarios here.)
 * You have Ant 1.6.5 or newer installed.
 * You have !FlexBuilder 3.0 installed and are at least somewhat familiar with it.
 * As you will be creating a `/dev/[uber_project]/[tested_project]Test/` test project folder by running the Ant bootstrap process specified below, we assume that no such folder currently exists, or that you'll be deleting or renaming it and starting over.

Steps:

 * If a `/dev/[uber_project]/[tested_project]Test/` test project folder already exists, delete or rename it.
 * Open a command prompt and cd to the `[uber_project]` folder.
 * Execute this command:
         `ant -Dproject="[tested_project]" -f [your_path_to_dev]/dev/vfu/visualflexunit/template/testprojecttemplate/build.xml bootstrap-visual-test-project`
 * Confirm that this has in fact created a new "`[tested_project]Test`" folder inside the `[uber_project]` folder.
 * Open Eclipse.
 * Ensure that you have an Eclipse path variable named `DEV_ROOT` that is set to the location of the `/dev/` folder. (You set this at Windows | Preferences | General | Workspace | Linked Resources.)
 * Import the "`[tested_project]Test`" folder as an Eclipse project into Eclipse.
 * Modify `/[tested_project]Test/test/flexunit2/skinning/styles.css` as appropriate. You'll find explanatory comments in the file to guide you.
 * If you embed fonts in styles.css, put the font resource files into `/[tested_project]Test/test/flexunit2/skinning/fonts/`
 * You're now ready to start writing your test classes.

===  Step 2: Writing Visual Tests ===

Before you start this process you'll need to decide which visual components you'd like to test. If you're just starting to explore VFU and don't have any components that you'd like to test you can either use standard flex components or copy the `/dev/vfu/vfuexample/src/ folder we're provided into your own project. Just don't name your project `vfuexample` - the build process requires unique names!

====  A. Create A New Test Class ====

Instead of subclassing `TestCase` (the standard !FlexUnit approach) subclass `com.allurent.flexunit2.vfu.framework.VfuTestCase`.

Note that `VfuTestCase` extends `TestCase` so you can do all the things that you can normally do in !FlexUnit test classes. The next section explains how to write visual test methods but you can also write standard [http://labs.adobe.com/wiki/index.php/ActionScript_3:resources:apis:libraries#FlexUnit FlexUnit] test methods and assertions.

As usual, your test class's name should end with "Test".

====  B. Write Visual Test Methods ====

Let's start with an example:
{{{
testMyAccordianComponent():void
        {
            var comp:MyAccordianComponent = new MyAccordianComponent();
            with (testSequence)
            {
                addSetProperty(comp, "selectedIndex", 1);
                addRefresh();
                addAssertComponentMatchBaseline(comp, 1);

                addSetProperty(comp, "selectedIndex", 2);
                addEventDispatch(comp.getHeaderAt(0), new MouseEvent(MouseEvent.MOUSE_DOWN));
                addRefresh();
                addAssertComponentMatchBaseline(comp, 2);

                start();
            }
        }
}}}
As you can see, the example method:
 * First, instantiates a component
 * Second, tells `VfuTestCase.testSequence` a sequence of actions that it wants to see happen relative to the component
 * Finally, calls start()

Your visual test methods should follow the same pattern as the example. The action sequence in the second step will generally consist of one or more repetitions (the example has two) of this subsequence:
 * One or more actions that manipulate the component. These can include setting the component's properties, setting its styles, and dispatching mouse and/or keyboard events from it.
 * A refresh. This involves several actions under the hood but essentially allows the component to display fully before its appearance is tested. (You can look at the code for `TestSequenceManager.addRefresh()` if you're curious about the details.)
 * An assertion that the component's appearance will now match a saved baseline. Note that, in addition to the component instance, we pass in an ID integer to the `addAssertComponentMatchBaseline()` call. This must be unique for each such call within a given method, and is used by VFU to determine the name of the component's baseline file.

See the Visual !FlexUnit ASDocs for `com.allurent.flexunit2.vfu.framework.testsequence.TestSequenceManager` for details on its `add[some_command]()` methods, their parameters, etc. ASDocs can be found at `\dev\vfu\visualflexunit\build\as3doc\index.html`.

As usual, your test method names should start with "test".

In case you're curious, here's a quick overview of what is going on under the hood. For each test method, VFU attaches your component to the display list, assembles a queue of `TestSequenceCommand` instances, and executes the queue when you call `start()`. There isn't a direct one-to-one relationship between the calls you add to your test method and commands added to the queue; for example `addRefresh()` adds three commands. Some of the commands are synchronous (e.g. `SetProperty`) while others (e.g. those created by `addRefresh()`) are asynchronous.

====  C. Add your test class to !VfuGuiFlexUnitAllTests.as ====

Open `/[tested_project]Test/test/flexunit2/VfuGuiFlexUnitAllTests.as` and follow the instructions in the file.

You're now ready to run your tests!

===  Step 3: Running Your Tests with the VFU AIR GUI ===

====  Launching the AIR GUI ====

The Eclipse project that we created above is an AIR project right click your project in the Navigator view and select Run As | Adobe AIR Application, Debug As | Adobe AIR Application.

====  Viewing Results in the AIR GUI ====

As your tests run you'll see your components appearing and disappearing on the screen. When this stops you'll see a UI that is in some ways similar to !FlexUnit's. The left hand panel has the Failures and All Tests tabs that you've come to know and love. If no failures are displayed, you're all set. Failures for visual tests come in two varieties:

===== 1. Missing Baseline Failures =====

These occur the first time you run a given visual assertion. Confirm that the displayed image meets your expectations, then click the button that says "Yes, Use The Current Bitmap As A New Baseline". If the image displayed doesn't meet your expectations this is probably due to issues unrelated to VFU. On the other hand, if your component's image is different in VFU than it is in other settings this may be something that we need to look at so please [http://code.google.com/p/visualflexunit/issues/list let us know].

Note that VFU will only report one failure of this type for a given test method each time you run it. In other words, if you write a test method with four visual assertions, you'll have to run the AIR GUI version of VFU four times in order to create the requisite four baseline files. We suggest that you develop a habit of running the GUI immediately after you write each assertion in order to avoid confusion.

===== 2. Bitmap Doesn't Match Baseline Failures =====

When these occur your best first step is probably to click the Open Diff Viewer button. This will display both images, alternating, so that you can easily see how they differ.
 * If the difference between the two images is visually obvious you will need to think about why this is happening and what to do next. This is a fairly open-ended scenario that we can't fully address here. One option that is available to you is to bless your test result image ("current image") as a new baseline image.
 * If the difference between the two images isn't visually obvious, this is a different sort of problem. It suggests that the algorithms that we are using to ignore such unimportant differences are in need of tweaking, so please [http://code.google.com/p/visualflexunit/issues/list let us know].

===  Step 4: Connecting to VFU's Build Process ===

==== Conventions ====

We'll continue to use the conventions introduced in Step 1 here.  (i.e. we use *`[tested_project]`* to represent your tested project's name, and *`[uber_project]`* to represent the intermediate folder between `/dev/` and your project's folder)

(For the purposes of these instructions *`[tested_project]`* simply indicates your tested project's folder's name. If you choose to also implement the build process modeled here for your tested project, you'll also use this name for your Ant project's name attribute, but we digress.)

==== Visual !FlexUnit's Build Process ====

If you're seriously interested in automated build processes you can find more details on VFU's build process at [http://code.google.com/p/visualflexunit/wiki/VFUBuildProcess VFU's build process wiki page].

==== build-user.properties ====

 * Open `/dev/build-user.properties` and modify the settings as needed.

==== Tested Project's build-assets.xml ====

This file informs the build process of the location of the tested project's SWC. These instructions assume that it's placed in a `/[tested_project]/bin/` subfolder. If your SWC's location is different, modify the path accordingly.

 * Copy `/dev/vfu/vfuexample/build-assets.xml` to `/dev/[uber_project]/[tested_project]/build-assets.xml` and open the copy.
 * Replace all instances of `"vfuexample"` with `"[tested_project]"`.
 * Replace one instance of `"/vfu/"` with `"/[uber_project]/"`.

==== Tested Project's build.xml & build-imports.xml ====

You no doubt noticed these files while copying build-assets.xml. You don't need these files for the task at hand, but might find them interesting if you'd like to automate the build process for your tested project.

==== /dev/[uber_project]/build-assets.xml and /dev/build-assets.xml ====

These files wire your tested project's build-assets.xml file into the build process.

 * Copy `/dev/vfu/build-assets.xml` to `/dev/[uber_project]/build-assets.xml` and open the copy.
 * Change the project's name attribute from `"vfu.assets"` to `"[uber_project].assets"`.
  * Delete one of the import lines.
  * Edit the other import line so that it reads `"<import file="[tested_project]/build-assets.xml"/>"`.
 * Optional for our current purposes, but good form: In `/dev/build-assets.xml`:
  * Add an import line that says `"<import file="[uber_project]/build-assets.xml"/>"`.
 
==== Test Project's Build Files ==== 

The bootstrap process (Step 1) created `build.xml` and `build-imports.xml` files in `/dev/[uber_project]/[tested_project]Test/` These are complete and ready to use. If you want to understand the build process we suggest that you take a look at them, and at [http://code.google.com/p/visualflexunit/wiki/VFUBuildProcess VFU's build process wiki page].

==== /dev/[uber_project]/build-imports.xml ====

 * Change the project's name attribute from `"vfu.imports"` to `"[uber_project].imports"`.

==== /dev/[uber_project]/build.xml ====

This step is optional. If desired, you can create a build file for the uber project that will build both tested and test projects, then run the test project's tests. To do this:

 * Copy `/dev/vfu/build.xml` to `/dev/[uber_project]/build.xml` and open the copy.
 * In the first line change the project's name from `vfu` to `[uber_project]`.
 * In the `clean`, `build` and `test` targets:
  * Delete all lines that include `visualflexunit` or `visualflexunitTest`.
  * Replace all instances of `"vfuexample"` with `[tested_project]`.
 
==== /dev/build.xml ===

This is another optional step. The `/dev/build.xml` file does the same thing as `/dev/[uber_project]/build.xml`, but for the entire build process. If you'd like `[uber_project]` to be included when we tell the build process "build and test everything" follow these steps:
 * Open `/dev/build.xml`.
 * Observe the `clean`, `build` and `test` targets.
 * In each target copy the line for the vfu uber project, and create a line under it which is identical, except that it says `"[uber_project]"` rather than `"vfu"`.

===  Step 5: Using the Build Process ===

==== Prerequisites ====

We assume that you have done the following:

 * You've run your test project in AIR GUI mode and created your baselines as explained above.
 * Compiled `[tested_project]` and all libraries upon which it depends.

====  Automated Mode In Flash Player ====

At the command prompt:
 * cd to the `[tested_project]Test` folder.
 * Execute "ant test"
 * Ant will output text to the command prompt window which will tell you how many of your tests have passed and failed, and provide stack traces for failures.

(If you're testing the example test components that we provide in `vfuexample` you'll find that there is one test that reliably fails at this point. The testCanvas_2() test method tests a component that consists of buttons on a canvas. We've specified drop shadows for the buttons that have fairly bizarre property settings. One of these buttons renders differently across the AIR/SWF divide. We suggest that you re-run the tests in the SWF GUI, as explained below, and take a look with the diff viewer.)

====  Automated Mode In Mozilla ====

If you'd like to run your tests in Firefox, simply set the following properties in your dev/build-user.properties file:
{{{
# adjust browser location to suit your local system
mozilla.browser.executable=C:/Apps/Firefox/firefox.exe
arc-flexunit2.using.mozilla=true
}}}

Then execute "ant test" as described above.

==== More Advanced Automated Testing Options ====

#################

====  Automated Mode In AIR ====

(Not yet implemented)

====  If Tests Fail In Automated Mode ====

If any of your tests fail you will probably want to run them in GUI mode in order to see how your test results differ from the saved baseline images.

If you've run your tests on a different platform from that in which their baseline files were created (e.g. you created baselines in AIR, then ran the tests in the Flash Player, and they failed) you should obviously run the same test-platform-type of GUI (e.g. in the example just cited, run the SWF GUI) to view the differences. Running the GUI in the platform in which the baseline files were created will probably simply result in your tests passing, which won't tell you much.

===  Step 6: Using VFU's SWF-Based GUI ===

 * Open a command prompt and cd to the `[tested_project]Test` folder.
 * Execute this command:
       `ant test-swf-gui`
 * This will clean your build directory, compile the SWF GUI, and run it. The SWF GUI is essentially the same as the AIR GUI with these exceptions:
  * The app is launched using Ant
  * It runs in Flash Player rather than AIR
  * We haven't implemented the ability to save baselines in the SWF GUI version yet